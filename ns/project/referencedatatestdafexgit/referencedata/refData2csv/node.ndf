<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">referenceData</value>
  <value name="svc_subtype">default</value>
  <value name="svc_sigtype">unknown</value>
  <record name="svc_sig" javaclass="com.wm.util.Values">
    <record name="sig_in" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="node_subtype">unknown</value>
      <value name="node_nsName">pub.referenceData.docTypes:matchCriteria</value>
      <value name="node_pkg">WmPublic</value>
      <value name="node_comment"></value>
      <value name="is_public">false</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="wrapper_type">IData</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
        <record javaclass="com.wm.util.Values">
          <value name="node_type">record</value>
          <value name="node_subtype">unknown</value>
          <value name="node_comment"></value>
          <record name="node_hints" javaclass="com.wm.util.Values">
            <value name="field_largerEditor">false</value>
            <value name="field_password">false</value>
          </record>
          <value name="is_public">false</value>
          <value name="field_name">matchCriteria</value>
          <value name="field_type">record</value>
          <value name="field_dim">1</value>
          <value name="wrapper_type">IData</value>
          <value name="nillable">true</value>
          <value name="form_qualified">false</value>
          <value name="is_global">false</value>
          <value name="is_soap_array_encoding_used">false</value>
          <array name="rec_fields" type="record" depth="1">
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="node_comment"></value>
              <record name="node_hints" javaclass="com.wm.util.Values">
                <value name="field_usereditable">false</value>
                <value name="field_largerEditor">false</value>
                <value name="field_password">false</value>
              </record>
              <value name="is_public">false</value>
              <value name="field_name">path</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <array name="field_options" type="value" depth="1">
                <value>Index</value>
                <value>Organization Id</value>
                <value>Name</value>
                <value>Website</value>
                <value>Country</value>
                <value>Description</value>
                <value>Founded</value>
                <value>Industry</value>
                <value>Number of employees</value>
              </array>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="node_comment"></value>
              <record name="node_hints" javaclass="com.wm.util.Values">
                <value name="field_usereditable">false</value>
                <value name="field_largerEditor">false</value>
                <value name="field_password">false</value>
              </record>
              <value name="is_public">false</value>
              <value name="field_name">compareValueAs</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="field_opt">true</value>
              <array name="field_options" type="value" depth="1">
                <value>string</value>
                <value>numeric</value>
                <value>date</value>
              </array>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="node_comment"></value>
              <record name="node_hints" javaclass="com.wm.util.Values">
                <value name="field_usereditable">true</value>
                <value name="field_largerEditor">false</value>
                <value name="field_password">false</value>
              </record>
              <value name="is_public">false</value>
              <value name="field_name">datePattern</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="field_opt">true</value>
              <array name="field_options" type="value" depth="1">
              </array>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">record</value>
              <value name="node_subtype">unknown</value>
              <value name="node_comment"></value>
              <record name="node_hints" javaclass="com.wm.util.Values">
                <value name="field_largerEditor">false</value>
                <value name="field_password">false</value>
              </record>
              <value name="is_public">false</value>
              <value name="field_name">joins</value>
              <value name="field_type">record</value>
              <value name="field_dim">1</value>
              <value name="wrapper_type">IData</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
              <value name="is_soap_array_encoding_used">false</value>
              <array name="rec_fields" type="record" depth="1">
                <record javaclass="com.wm.util.Values">
                  <value name="node_type">unknown</value>
                  <value name="node_subtype">unknown</value>
                  <value name="node_comment"></value>
                  <record name="node_hints" javaclass="com.wm.util.Values">
                    <value name="field_usereditable">false</value>
                    <value name="field_largerEditor">false</value>
                    <value name="field_password">false</value>
                  </record>
                  <value name="is_public">false</value>
                  <value name="field_name">operator</value>
                  <value name="field_type">string</value>
                  <value name="field_dim">0</value>
                  <array name="field_options" type="value" depth="1">
                    <value>equals</value>
                    <value>doesNotEqual</value>
                    <value>greaterThan</value>
                    <value>greaterThanOrEqual</value>
                    <value>lessThan</value>
                    <value>lessThanOrEqual</value>
                    <value>equalsIgnoreCase</value>
                    <value>contains</value>
                    <value>doesNotContain</value>
                    <value>beginsWith</value>
                    <value>doesNotBeginWith</value>
                    <value>endsWith</value>
                    <value>doesNotEndWith</value>
                  </array>
                  <value name="nillable">true</value>
                  <value name="form_qualified">false</value>
                  <value name="is_global">false</value>
                </record>
                <record javaclass="com.wm.util.Values">
                  <value name="node_type">unknown</value>
                  <value name="node_subtype">unknown</value>
                  <value name="node_comment"></value>
                  <record name="node_hints" javaclass="com.wm.util.Values">
                    <value name="field_usereditable">true</value>
                    <value name="field_largerEditor">false</value>
                    <value name="field_password">false</value>
                  </record>
                  <value name="is_public">false</value>
                  <value name="field_name">value</value>
                  <value name="field_type">string</value>
                  <value name="field_dim">0</value>
                  <array name="field_options" type="value" depth="1">
                  </array>
                  <value name="nillable">true</value>
                  <value name="form_qualified">false</value>
                  <value name="is_global">false</value>
                </record>
                <record javaclass="com.wm.util.Values">
                  <value name="node_type">unknown</value>
                  <value name="node_subtype">unknown</value>
                  <value name="node_comment"></value>
                  <record name="node_hints" javaclass="com.wm.util.Values">
                    <value name="field_usereditable">false</value>
                    <value name="field_largerEditor">false</value>
                    <value name="field_password">false</value>
                  </record>
                  <value name="is_public">false</value>
                  <value name="field_name">joinType</value>
                  <value name="field_type">string</value>
                  <value name="field_dim">0</value>
                  <value name="field_opt">true</value>
                  <array name="field_options" type="value" depth="1">
                    <value>and</value>
                    <value>or</value>
                  </array>
                  <value name="nillable">true</value>
                  <value name="form_qualified">false</value>
                  <value name="is_global">false</value>
                </record>
              </array>
              <value name="modifiable">true</value>
            </record>
          </array>
          <value name="modifiable">true</value>
        </record>
      </array>
      <value name="modifiable">true</value>
    </record>
    <record name="sig_out" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="node_subtype">unknown</value>
      <value name="is_public">false</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
        <record javaclass="com.wm.util.Values">
          <value name="node_type">record</value>
          <value name="node_subtype">unknown</value>
          <value name="is_public">false</value>
          <value name="field_name">refData2csv</value>
          <value name="field_type">record</value>
          <value name="field_dim">1</value>
          <value name="nillable">true</value>
          <value name="form_qualified">false</value>
          <value name="is_global">false</value>
          <value name="is_soap_array_encoding_used">false</value>
          <array name="rec_fields" type="record" depth="1">
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Index</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Organization Id</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Name</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Website</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Country</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Description</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Founded</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Industry</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
            <record javaclass="com.wm.util.Values">
              <value name="node_type">unknown</value>
              <value name="node_subtype">unknown</value>
              <value name="is_public">false</value>
              <value name="field_name">Number of employees</value>
              <value name="field_type">string</value>
              <value name="field_dim">0</value>
              <value name="nillable">true</value>
              <value name="form_qualified">false</value>
              <value name="is_global">false</value>
            </record>
          </array>
          <value name="modifiable">true</value>
        </record>
      </array>
      <value name="modifiable">true</value>
    </record>
  </record>
  <value name="stateless">yes</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">none</value>
  <value name="svc_out_validator_options">none</value>
  <value name="auditoption">0</value>
  <null name="auditfields_input"/>
  <null name="auditfields_output"/>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
  <array name="allowedHTTPMethods" type="value" depth="1">
    <value>TRACE</value>
    <value>HEAD</value>
    <value>DELETE</value>
    <value>POST</value>
    <value>GET</value>
    <value>OPTIONS</value>
    <value>PUT</value>
    <value>PATCH</value>
  </array>
  <value name="pipeline_option">0</value>
  <null name="originURI"/>
  <value name="modifiable">true</value>
  <value name="is_public">false</value>
  <record name="$REFERENCE_DATA$" javaclass="com.wm.util.Values">
    <value name="name">refData2csv</value>
    <value name="packageName">ReferenceDataTestDAFExGitProject</value>
    <value name="descriptorName">project.referencedatatestdafexgit.referencedata:refData2csv</value>
    <byte name="sourceBytes">
    </byte>
    <null name="description"/>
    <value name="columnDelimiter">,</value>
    <value name="releaseCharacter">"</value>
    <array name="columnNames" type="value" depth="1">
      <value>Index</value>
      <value>Organization Id</value>
      <value>Name</value>
      <value>Website</value>
      <value>Country</value>
      <value>Description</value>
      <value>Founded</value>
      <value>Industry</value>
      <value>Number of employees</value>
    </array>
    <value name="encodingType">IBM437</value>
  </record>
</Values>
